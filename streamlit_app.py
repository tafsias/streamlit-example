{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "#Nathan removed functions related to terminal commands from given library\n",
    "from part_ncbiblast_library import *\n",
    "import json\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Inputs for BLAST - using default parameters in this program (can be edited to include more changeable parameters), only inputs are email (which can be skipped) and protein sequence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "aa_codes = ['G', 'A', 'L', 'M', 'F', 'W', 'K', 'Q', 'E', 'S', 'P', 'V', 'I', 'C', 'Y', 'H', 'R', 'N', 'D', 'T']\n",
    "#returns truen if sequence only contains valid amino acids\n",
    "def valid_aa_code(sequence):\n",
    "    for s in sequence:\n",
    "            if s not in aa_codes:\n",
    "                return False\n",
    "    return True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "email = (input(\"What's your email: \") or 'tafsia.shikdar@beyondmeat.com')\n",
    "#will continue asking until valid protein sequence is given\n",
    "#while True:\n",
    "        #seq = str(input(\"Protein AA Sequence to Compare: \"))\n",
    "        #if not valid_aa_code(seq.upper()) or seq == '':\n",
    "         #   print('Invalid Sequence. Only use one-letter AA codes: ' + str(aa_codes))\n",
    "          #  continue\n",
    "      #  else:\n",
    "      #      break\n",
    "#test seq: MIDNAYHIDS (4 hits)\n",
    "#test seq 2: MARPFTLSLLSLCLLLSAWSCFGGSSSTNRFNICQLNSLNALKPDHRVETDGGLVETWSSRHPELECAGVTVTRRTLYRNGFQMPSYSPYSQMIMAIQGKGALGLALSGCAETYEEPAKESSSSSQKPSDSHQKIRQFDQGHVMLIPRGVPFWIFNTGDEPLITVTLLDTSSEDNQLDQSPREFYLAGNPDIEHPEAMKEKQQQQAEEEGGNVLSGFGKRFLARALNIDQDTANKLISPDDEMKQIVKLKEGLSVISPKWQGQQEDEDEDDDDEDEDESVSRPSRRPSHGKRVHKEEETVVEPYPHGKHVHKEVEKEVEPLPPRKHVHKEEEKEIEPLPPRRSRHHHDEGEDEGEEEEKPRARRTRGPTPSPKGEGHRGVEEEDESEDTKGHKTRHEKTRHEKSWKEHRPEGEDVEKGEAHEEWETRPSKDKPHGSNGLDETICSSKLQFNIARPKGADFYNPKAGRIKNLNSQSLPALQHFGLSAQYVVLYKNGIYSPHWNMDANSVIYVIRGQGQVRVVNNEGIVMFDDELKKGQLLVVPQNFMVAEEAGDQGFEYVVFKTNDNAVTSYLKETFRAFPAEVLVNIYKLKHSQVHDLKYNGNLGPLVNPENSLDQSS\n",
    "#(250 hits Uniprot)\n",
    "seq = str(input(\"Protein AA Sequence to Compare: \"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case, only input params are email and sequence, everything else is default"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "params = {\n",
    "        \"email\": email,\n",
    "        \"program\":\"blastp\",\n",
    "        \"matrix\":\"PAM30\",\n",
    "        \"alignments\":\"250\",\n",
    "        \"scores\":\"250\",\n",
    "        \"exp\":\"10\",\n",
    "        \"filter\":\"F\",\n",
    "        \"gapalign\":\"true\",\n",
    "        \"compstats\":\"F\",\n",
    "        \"align\":\"0\",\n",
    "        \"stype\":\"protein\",\n",
    "        \"sequence\": seq,\n",
    "        \"database\":\"uniprotkb_refprotswissprot\"\n",
    "    }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Running job after asking for a name (otherwise default)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "title = str(input('Name this run: ') or 'Protein Search')\n",
    "jobId = serviceRun(params['email'], title, params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This function checks job status every 3 seconds until it is done"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "RUNNING\n",
      "FINISHED\n"
     ]
    }
   ],
   "source": [
    "clientPoll(jobId)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Retrieving result as a json file and loading it in so it can be parsed as dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "file = serviceGetResult(jobId, 'json')\n",
    "results = json.loads(file)\n",
    "#print(results)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Searching through JSON, pulling the data needed into a dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Results:250\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "15\n",
      "16\n",
      "17\n",
      "18\n",
      "19\n",
      "20\n",
      "21\n",
      "22\n",
      "23\n",
      "24\n",
      "25\n",
      "26\n",
      "27\n",
      "28\n",
      "29\n",
      "30\n",
      "31\n",
      "32\n",
      "33\n",
      "34\n",
      "35\n",
      "36\n",
      "37\n",
      "38\n",
      "39\n",
      "40\n",
      "41\n",
      "42\n",
      "43\n",
      "44\n",
      "45\n",
      "46\n",
      "47\n",
      "48\n",
      "49\n",
      "50\n",
      "51\n",
      "52\n",
      "53\n",
      "54\n",
      "55\n",
      "56\n",
      "57\n",
      "58\n",
      "59\n",
      "60\n",
      "61\n",
      "62\n",
      "63\n",
      "64\n",
      "65\n",
      "66\n",
      "67\n",
      "68\n",
      "69\n",
      "70\n",
      "71\n",
      "72\n",
      "73\n",
      "74\n",
      "75\n",
      "76\n",
      "77\n",
      "78\n",
      "79\n",
      "80\n",
      "81\n",
      "82\n",
      "83\n",
      "84\n",
      "85\n",
      "86\n",
      "87\n",
      "88\n",
      "89\n",
      "90\n",
      "91\n",
      "92\n",
      "93\n",
      "94\n",
      "95\n",
      "96\n",
      "97\n",
      "98\n",
      "99\n",
      "100\n",
      "101\n",
      "102\n",
      "103\n",
      "104\n",
      "105\n",
      "106\n",
      "107\n",
      "108\n",
      "109\n",
      "110\n",
      "111\n",
      "112\n",
      "113\n",
      "114\n",
      "115\n",
      "116\n",
      "117\n",
      "118\n",
      "119\n",
      "120\n",
      "121\n",
      "122\n",
      "123\n",
      "124\n",
      "125\n",
      "126\n",
      "127\n",
      "128\n",
      "129\n",
      "130\n",
      "131\n",
      "132\n",
      "133\n",
      "134\n",
      "135\n",
      "136\n",
      "137\n",
      "138\n",
      "139\n",
      "140\n",
      "141\n",
      "142\n",
      "143\n",
      "144\n",
      "145\n",
      "146\n",
      "147\n",
      "148\n",
      "149\n",
      "150\n",
      "151\n",
      "152\n",
      "153\n",
      "154\n",
      "155\n",
      "156\n",
      "157\n",
      "158\n",
      "159\n",
      "160\n",
      "161\n",
      "162\n",
      "163\n",
      "164\n",
      "165\n",
      "166\n",
      "167\n",
      "168\n",
      "169\n",
      "170\n",
      "171\n",
      "172\n",
      "173\n",
      "174\n",
      "175\n",
      "176\n",
      "177\n",
      "178\n",
      "179\n",
      "180\n",
      "181\n",
      "182\n",
      "183\n",
      "184\n",
      "185\n",
      "186\n",
      "187\n",
      "188\n",
      "189\n",
      "190\n",
      "191\n",
      "192\n",
      "193\n",
      "194\n",
      "195\n",
      "196\n",
      "197\n",
      "198\n",
      "199\n",
      "200\n",
      "201\n",
      "202\n",
      "203\n",
      "204\n",
      "205\n",
      "206\n",
      "207\n",
      "208\n",
      "209\n",
      "210\n",
      "211\n",
      "212\n",
      "213\n",
      "214\n",
      "215\n",
      "216\n",
      "217\n",
      "218\n",
      "219\n",
      "220\n",
      "221\n",
      "222\n",
      "223\n",
      "224\n",
      "225\n",
      "226\n",
      "227\n",
      "228\n",
      "229\n",
      "230\n",
      "231\n",
      "232\n",
      "233\n",
      "234\n",
      "235\n",
      "236\n",
      "237\n",
      "238\n",
      "239\n",
      "240\n",
      "241\n",
      "242\n",
      "243\n",
      "244\n",
      "245\n",
      "246\n",
      "247\n",
      "248\n",
      "249\n",
      "250\n"
     ]
    }
   ],
   "source": [
    "data = {\n",
    "    'Link':[], \n",
    "    'Entry': [], \n",
    "    'Entry Name': [], \n",
    "    'Protein Name': [], \n",
    "    'Organism': [], \n",
    "    'Gene Name': [], \n",
    "    'Length': [], \n",
    "    'Sequence': [], \n",
    "    'Percentage Identity': [],\n",
    "    'Chain 1 Sequence': [],\n",
    "    'Chain 2 Sequence': []\n",
    "    }\n",
    "\n",
    "#Manually searched through retrieved json file to identify keys of the info we needed - may be an easier/less hard coded way to do this via API queries\n",
    "columns_to_keys = {\n",
    "    'Link':'hit_url', \n",
    "    'Entry': 'hit_acc', \n",
    "    'Entry Name': 'hit_id', \n",
    "    'Protein Name': 'hit_uni_de', \n",
    "    'Organism': 'hit_uni_os', \n",
    "    'Gene Name': 'hit_uni_gn', \n",
    "    'Length': 'hit_len',\n",
    "}\n",
    "\n",
    "#in case info doesn't exist for entry, default message fills the dataframe\n",
    "def add_info(column):\n",
    "    result_key = columns_to_keys[column]\n",
    "    if result_key in hit:\n",
    "        data[column].append(hit[result_key])\n",
    "    else:\n",
    "        data[column].append('No Data Found')\n",
    "\n",
    "#while building df, will let user know total number of entries and progress\n",
    "print('Total Results:' + str(len(results['hits'])))\n",
    "#goes through each hit entry to pull the necessary info using manually matched keys to data desired\n",
    "for hit in results['hits']:\n",
    "    print(hit['hit_num'])\n",
    "    for c in columns_to_keys:\n",
    "        add_info(c)\n",
    "    #sequence not in original data file, so querying api for specific entry to get that data\n",
    "    url = 'https://rest.uniprot.org/uniprotkb/' + hit['hit_acc'] + '.json'\n",
    "    info = json.loads(restRequest(url))\n",
    "    seq = info['sequence']['value']\n",
    "    data['Sequence'].append(seq)\n",
    "    #adding percentage identity\n",
    "    try:\n",
    "        data['Percentage Identity'].append(hit['hit_hsps'][0]['hsp_identity'])\n",
    "    except:\n",
    "        data['Percentage Identity'].append('No Data Found')\n",
    "    #finding chain data\n",
    "    try:\n",
    "        chains =  [f for f in info['features'] if f['type'] == 'Chain']\n",
    "        try:\n",
    "            chain_one_start = chains[0]['location']['start']['value'] - 1\n",
    "            chain_one_end = chains[0]['location']['end']['value'] - 1\n",
    "            data['Chain 1 Sequence'].append(seq[chain_one_start:chain_one_end])\n",
    "        except:\n",
    "            data['Chain 1 Sequence'].append('No Data Found')\n",
    "        try:\n",
    "            chain_two_start = chains[1]['location']['start']['value'] - 1\n",
    "            chain_two_end = chains[1]['location']['end']['value'] - 1\n",
    "            data['Chain 2 Sequence'].append(seq[chain_two_start:chain_two_end])\n",
    "        except:\n",
    "            data['Chain 2 Sequence'].append('No Data Found')\n",
    "    except:\n",
    "        data['Chain 1 Sequence'].append('No Data Found')\n",
    "        data['Chain 2 Sequence'].append('No Data Found')\n",
    "    #unlike other desired data, this one was nested in the original json file\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.DataFrame(data)\n",
    "if title != 'Protein Search':\n",
    "    name = title\n",
    "else:\n",
    "    name = params['sequence']\n",
    "df.to_csv(r'C:\\Users\\Tafsia Shikdar\\Desktop\\\\' + name + '.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.4 ('blast')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "dbdf5c8dbf87b3169415e0acf39613114f5f150d38cc301bbc68c0e106389f60"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
